// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  username String @unique
  password String
  role     String @default("SELLER") // ADMINISTRATOR

  Order Order[]

  @@map("users")
}

model Customer {
  id      Int     @id @default(autoincrement())
  name    String
  email   String?
  phone   String?
  balance Float   @default(0)

  address Address?
  Order   Order[]

  @@map("customers")
}

model Address {
  id           Int     @id @default(autoincrement())
  city         String?
  neighborhood String?
  street       String?
  number       String?
  complement   String?
  reference    String?

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId Int      @unique

  @@map("addresses")
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String
  brand         String
  unit          String
  stockQuantity Decimal  @default(0.00)
  costPrice     Decimal
  profitMargin  Decimal
  profit        Decimal
  salePrice     Decimal
  createdAt     DateTime @default(now())

  orderItems         OrderItem[]
  stockMovementItems StockMovementItem[]

  @@map("products")
}

model Order {
  id            Int      @id @default(autoincrement())
  customerId    Int?
  sellerId      Int
  type          String
  status        String
  subtotal      Decimal
  total         Decimal
  notes         String?
  discount      Decimal  @default(0.00)
  paymentMethod String?
  paid          Boolean  @default(false)
  installments  Int? // Usado quando pagamento em cartão de crédito
  amountPaid    Decimal? // Usado quando pagamento em dinheiro
  createdAt     DateTime @default(now())

  customer Customer?      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  seller   User           @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  items    OrderItem[]
  payments OrderPayment[]

  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  quantity  Decimal
  unitPrice Decimal
  total     Decimal

  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderId   Int
  productId Int

  @@map("order_items")
}

model OrderPayment {
  id            Int      @id @default(autoincrement())
  amount        Decimal
  change        Decimal?
  paymentMethod String // CASH | DEBIT | CREDIT | PIX
  installments  Int? // Caso cartão, define quantas parcelas
  paidAt        DateTime @default(now())

  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int

  @@map("order_payments")
}

model StockMovement {
  id          Int      @id @default(autoincrement())
  type        String
  description String
  createdAt   DateTime @default(now())

  items StockMovementItem[]

  @@map("stock_movements")
}

model StockMovementItem {
  id       Int     @id @default(autoincrement())
  quantity Decimal

  stockMovementId Int
  productId       Int

  stockMovement StockMovement @relation(fields: [stockMovementId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("stock_movement_items")
}
