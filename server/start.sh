#!/bin/sh

set -e # Interrompe o script em caso de erro

# Verifica se o comando nc est√° dispon√≠vel
if ! command -v nc >/dev/null 2>&1; then
  echo "‚ùå O comando 'nc' (Netcat) n√£o est√° dispon√≠vel. Certifique-se de que ele est√° instalado."
  exit 1
fi

MAX_WAIT_SECONDS=180 # 3 minutos
WAIT_INTERVAL_SECONDS=5
SECONDS_WAITED=0

# Espera o Postgres estar dispon√≠vel
until nc -z ${DATABASE_HOST:-postgres-pi2} ${DATABASE_PORT:-5432} ; do
  echo "‚è≥ Aguardando o Banco no host ${DATABASE_HOST:-postgres-pi2} na porta ${DATABASE_PORT:-5432} ficar dispon√≠vel..."
  sleep $WAIT_INTERVAL_SECONDS
  SECONDS_WAITED=$((SECONDS_WAITED + WAIT_INTERVAL_SECONDS))
  if [ $SECONDS_WAITED -ge $MAX_WAIT_SECONDS ]; then
    echo "‚ùå Tempo limite excedido ($MAX_WAIT_SECONDS segundos). O banco de dados n√£o ficou dispon√≠vel."
    exit 1
  fi
done

echo "‚úÖ PostgreSQL est√° pronto, iniciando a aplica√ß√£o..."

# Verifica se a pasta de migrations j√° existe
if [ -d "prisma/migrations" ] && [ "$(ls -A prisma/migrations)" ]; then
  echo "üìÅ Migrations j√° existem, pulando cria√ß√£o e aplicando migrations..."
  npx prisma migrate deploy
else
  echo "üöÄ Nenhuma migration encontrada, executando 'prisma migrate dev --name init'..."
  npx prisma migrate dev --name init
fi

# Gera os clients do Prisma
echo "‚è≥ Gerando Prisma Client..."
npx prisma generate

# Executa o seed para criar o usu√°rio admin
echo "‚è≥ Criando Usu√°rio Admin..."
npm run prisma:seed

# Inicia o Prisma Studio em background
echo "‚è≥ Iniciando Prisma Studio em background na porta 5555..."
npx prisma studio --port 5555 &

# Inicia a aplica√ß√£o
echo "‚è≥ Iniciando Backend..."
npm run start:dev